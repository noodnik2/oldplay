/*

	mrlpd.c:			Marty's Remote Line Printer Daemon
					Copyright (C) 1992, Contahal Ltd.


*/

#include	<stdio.h>
#include	<signal.h>
#include	<netdb.h>

#include	<sys/types.h>
#include	<sys/socket.h>
#include	<sys/wait.h>

#include	<netinet/in.h>

#include	"compiler.h"
#include	"clgetopt.h"
#include	"mrlpsub.h"
#include	"substr.h"

#define		MAX_ERRS	10

struct lpm_opts {
	int help ;
	int quiet ;
	int debug ;
	char *lpcmd ;
	char *lpargs ;
	char *lpopts ;
	char *lpserv ;
	char *lpdserv ;
} ;

#define	OPT_HELP	(lpmo.help)
#define	OPT_QUIET	(lpmo.quiet)
#define	OPT_DEBUG	(lpmo.debug)
#define	LPT_LPCMD	(lpmo.lpcmd)
#define	OPT_LPARGS	(lpmo.lpargs)
#define	OPT_LPOPTS	(lpmo.lpopts)
#define	OPT_LPCMD	(lpmo.lpcmd)
#define	OPT_LPSERV	(lpmo.lpserv)
#define	OPT_LPDSERV	(lpmo.lpdserv)

#define	RSOCK		(lpma.rsock)
#define	LSOCK		(lpma.lsock)
#define	LSOCKD_A	(lpma.lsockd_a)
#define	CUR_LSOCKD_A	(lpma.cur_lsockd_a)
#define	ERRS		(lpma.errs)
#define	DONE		(lpma.done)
#define	EXIT_RC		(lpma.exit_rc)
#define	JOBNO		(lpma.jobno)
#define	FILENO		(lpma.fno)
#define	MSGBUF		(lpma.msgbuf)
#define	C_PID		(lpma.lpm_cpid)
#define	JOB_RC		(lpma.job_rc)

struct lpm_arg {
	long jobno ;				/* job number               */
	int fno ;				/* file number within job   */
	int errs ;				/* number of errors in row  */
	int done ;				/* set to nonzero to exit   */
	int exit_rc ;				/* set to exit return code  */
	int job_rc ;				/* returncode from last job */
	int rsock ;				/* recieved command socket  */
	int lsock ;				/* listening command socket */
	SOCKA_T lsockd_a ;			/* data socket address      */
	SOCKA_T cur_lsockd_a ;			/* current data socket addr */
	pid_t lpm_cpid ;			/* current lpr process id   */

	char msgbuf[MRLP_MSGBSIZE] ;		/* general message buffer   */

	char lpm_lpserv[MRLP_SNBSIZE+1] ;	/* name of command service  */
	char lpm_lpdserv[MRLP_SNBSIZE+1] ;	/* name of data service     */
	char lpm_lpproto[MRLP_PNBSIZE+1] ;	/* protocol of command serv */
	char lpm_lpdproto[MRLP_PNBSIZE+1] ;	/* protocol of data service */

	char lpm_lpexec[MRLP_LECBSIZE+1] ;	/* line printer command     */
	char lpm_lpopts[MRLP_LEOBSIZE+1] ;	/* line printer optinos     */
	char lpm_lpargs[MRLP_LEABSIZE+1] ;	/* line printer arguments   */

	char cur_lpexec[MRLP_LECBSIZE+1] ;	/* current lp command	    */
	char cur_lpopts[MRLP_LEOBSIZE+1] ;	/* current lp options	    */
	char cur_lpargs[MRLP_LEABSIZE+1] ;	/* current lp arguments     */
	char cur_lpfn[MRLP_LENBSIZE+1] ;	/* current lpr remote fn    */

} ;

static void setdefaults() ;
static void init() ;
static void setup() ;
static void takedown() ;
static void accept_request() ;
static void inc_errs() ;
static void kill_lpjob() ;
static void sigcatch() ;

static void mrlp_nmsg() ;
static void mrlp_abortjob() ;
static void makecmd() ;

static struct lpm_arg lpma ;
static struct lpm_opts lpmo ;

void main(argc, argv)
int argc ;
char *argv[] ;
{

	setdefaults() ;

	init(argc, argv) ;

	setup() ;

	if (!OPT_QUIET) mrlp_msg("started") ;
	if (OPT_DEBUG) mrlp_msg("debug on") ;
	for (JOBNO= 1L; !DONE; JOBNO++) {
		accept_request() ;
	}

	if (!OPT_QUIET) mrlp_msg("stopped") ;
	exit(EXIT_RC) ;
}
	
static void setdefaults()
{
	memset((char *)&lpma, '\0', sizeof(lpma)) ;
	memset((char *)&lpmo, '\0', sizeof(lpmo)) ;
	strcpy(lpma.lpm_lpargs, "lp -t\"@FN\" @OPT") ;
	strcpy(lpma.lpm_lpserv, MRLPD_SCMD) ;
	strcpy(lpma.lpm_lpdserv, MRLPD_SDATA) ;
	strcpy(lpma.lpm_lpproto, MRLPD_PCMD) ;
	strcpy(lpma.lpm_lpdproto, MRLPD_PDATA) ;
}

static void init(argc, argv)
int argc ;
char *argv[] ;
{
	int i ;

	clinit(argv) ;
	while((i= clgetopt(argc, argv, "a:c:hqz"))>= 0) {
		switch(i) {
			case 'a': OPT_LPARGS= cloptarg ;	break ;
			case 'c': OPT_LPCMD= cloptarg ;		break ;
			case 'h': OPT_HELP= 1 ;			break ;
			case 'q': OPT_QUIET= 1 ;		break ;
			case 'z': OPT_DEBUG= 1 ;		break ;
			default:  exit(1) ;			break ;	
		}
	}	

	if (OPT_HELP) {
		clerror("no help available at this time") ;
		exit(0) ;
	}
}

static void setup()
{
	SOCKA_T lsock_a ;
	char *p, *getenv() ;

	/*
		apply environment values,
		then user options
	*/
	if ((p= OPT_LPCMD) == (char *)NULL) p= getenv(MRLPD_EVLPCMD) ;
	if (p != (char *)NULL) strncpy(lpma.lpm_lpexec, p, MRLP_LECBSIZE) ;
	if ((p= OPT_LPARGS) == (char *)NULL) p= getenv(MRLPD_EVLPARGS) ;
	if (p != (char *)NULL) strncpy(lpma.lpm_lpargs, p, MRLP_LEABSIZE) ;
	if ((p= OPT_LPOPTS) == (char *)NULL) p= getenv(MRLPD_EVLPOPTS) ;
	if (p != (char *)NULL) strncpy(lpma.lpm_lpopts, p, MRLP_LEOBSIZE) ;
	if ((p= OPT_LPSERV) == (char *)NULL) p= getenv(MRLPD_EVLPSERV) ;
	if (p != (char *)NULL) strncpy(lpma.lpm_lpserv, p, MRLP_SNBSIZE) ;
	if ((p= OPT_LPDSERV) == (char *)NULL) p= getenv(MRLPD_EVLPDSERV) ;
	if (p != (char *)NULL) strncpy(lpma.lpm_lpdserv, p, MRLP_SNBSIZE) ;

	/*
		get socket addresses of all sockets we will
		listen on...
	*/
	SOCKA_SADDR(lsock_a)= INADDR_ANY ;
	if (mrlp_getnp(&lsock_a, lpma.lpm_lpserv, lpma.lpm_lpproto)) {
		mrlp_abort("can't get remote printer command service port") ;
	}

	SOCKA_SADDR(LSOCKD_A)= INADDR_ANY ;
	if (mrlp_getnp(&LSOCKD_A, lpma.lpm_lpdserv, lpma.lpm_lpdproto)) {
		mrlp_abort("can't get remote printer data service port") ;
	}

	/*
		issue listen on command socket
	*/
	if (issuelisten(&LSOCK, &lsock_a)) {
		mrlp_abort("can't listen for connections") ;
		/*NOTREACHED*/
	}

	/*
		monitor certain signals
	*/
	signal(SIGPIPE, sigcatch) ;
	signal(SIGTERM, sigcatch) ;
	signal(SIGHUP, sigcatch) ;

	/*
		ensure that our "de-install" program will be called.

		I don't think this is right: because both the daemon
		AND the lp printer processes can execute the takedown
		procedure according to this...
	*/
	atexit(takedown) ;
}

static void takedown()
{
	kill_lpjob() ;
}

static void accept_request()
{
	SOCKA_T rsock_a ;
	pid_t pid ;
	int forked ;

	if (waitaccept(LSOCK, &RSOCK, &rsock_a, 0)) return ;

	signal(SIGCHLD, SIG_IGN) ;
	forked= 1 ;
	if ((pid= fork())< (pid_t)0) {
		mrlp_perr("can't fork") ;
		forked= 0 ;
	}

	if (forked) {
		if (pid != (pid_t) 0) {		/* parent */
			close(RSOCK) ;
			if (!OPT_QUIET) mrlp_nmsg("forked", "pid", (int)pid) ;
			return ;
		}
		if (!OPT_QUIET) mrlp_msg("in child process") ;
	}

	if (!OPT_QUIET) {
		sprintf(MSGBUF, "connect: %s", mrlp_inetaddr_str(&rsock_a)) ;
		mrlp_msg(MSGBUF) ;
	}

	ERRS= 0 ;
	memcpy(lpma.cur_lpexec, lpma.lpm_lpexec, MRLP_LECBSIZE) ;
	memcpy(lpma.cur_lpopts, lpma.lpm_lpopts, MRLP_LEABSIZE) ;
	memcpy(lpma.cur_lpargs, lpma.lpm_lpargs, MRLP_LEABSIZE) ;
	memcpy((char *)&CUR_LSOCKD_A, (char *)&LSOCKD_A, sizeof(SOCKA_T)) ;
	for (FILENO= 1; process_cmd() == 0; FILENO++) ;
	close(RSOCK) ;

	if (forked) {
		if (!OPT_QUIET) mrlp_msg("child exiting") ;
		exit(0) ;
	}
}

/*
	(int)stop_flag= process_cmd() ;

	Returns zero if expecting another command to follow.

*/
static int process_cmd()
{
	char cmdbuf[MRLP_CMDBSIZE+1] ;
	int i ;
	char *arg_p ;

	/*	read, perform a command		*/
	if (mrlp_getline(RSOCK, cmdbuf, MRLP_CMDBSIZE)) {
		if (!OPT_QUIET) mrlp_msg("cmd: unexpected EOF!") ;
		mrlp_abortjob("can't read cmd") ;
		return(1) ;		/* can't read command: abort job */
	}
	if (!OPT_QUIET) mrlp_smsg("command received", cmdbuf) ;

	/*	exit command			*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_EXIT, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: exit") ;
		mrlpd_replyokrc(0) ;
		return(1) ;
	}

	/*	version check command		*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_VERCHK, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: verchk") ;
		mrlpd_replyokrc(strcmp(arg_p, MRLPD_VER)) ;
		return(0) ;
	}

	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_TESTHOST, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: testhost") ;
		mrlpd_replymsg(MRLPCMDR_OK, "ready for print requests") ;
		return(0) ;
	}

	/*	check job command		*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_JOBCHK, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: jobchk") ;
		mrlpd_replyokrc(JOB_RC) ;
		return(0) ;
	}

	/*	set print command		*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_LPCMD, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: lpcmd") ;
		lpma.cur_lpexec[0]= '\0' ;
		strncpy(lpma.cur_lpargs, arg_p, MRLP_LECBSIZE) ;
		mrlpd_replyokrc(0) ;
		return(0) ;
	}

	/*	set print options		*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_LPOPT, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: lpopts") ;
		strncpy(lpma.cur_lpopts, arg_p, MRLP_LEOBSIZE) ;
		mrlpd_replyokrc(0) ;
		return(0) ;
	}

	/*	set data port			*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_SETDPORT, &arg_p)) {
		if (!OPT_QUIET) mrlp_smsg("cmd: setdport", arg_p) ;
		if (sscanf(arg_p, "%d", &i) != 1) {
			mrlp_abortjob("dport invalid") ;
			return(1) ;
		}
		SOCKA_SPORT(CUR_LSOCKD_A)= htons((u_short)i) ;
		mrlpd_replyokrc(0) ;
		return(0) ;
	}

	/*	print file command		*/
	if (mrlp_iscmdmsg(cmdbuf, MRLPCMD_PRINT, &arg_p)) {
		if (!OPT_QUIET) mrlp_msg("cmd: print") ;
		strncpy(lpma.cur_lpfn, arg_p, MRLP_LENBSIZE) ;
		if (doprintjob()) {
			mrlp_abortjob("lpjob failed") ;
			return(1) ;
		}
		return(0) ;
	}

	/*	invalid command			*/
	mrlp_abortjob("invalid command") ;
	return(1) ;
}

static void mrlp_abortjob(msg)
char *msg ;
{
	mrlp_serr("job aborted", msg) ;
	mrlpd_replymsg(MRLPCMDR_ABORT, msg) ;
}

static int doprintjob()
{
	char jobidbuf[33] ;

	/*	tell client that we're ready to receive file	*/
	sprintf(jobidbuf, "%ld:%d", JOBNO, FILENO) ;
	mrlpd_replymsg(MRLPCMDR_OK, jobidbuf) ;

	/*	receive, print the file				*/
	return(print_file(&JOB_RC)< 0) ;
}

static int mrlpd_replymsg(rtype, msg)
char *rtype, *msg ;
{
	char cmdbuf[MRLP_CMDBSIZE+1] ;

	sprintf(cmdbuf, "%s%s\n", rtype, msg) ;
	return(mrlp_wsock(RSOCK, cmdbuf, strlen(cmdbuf), cmdbuf)) ;
}

static int mrlpd_replyokrc(rc)
int rc ;
{
	char cmdbuf[MRLP_CMDBSIZE+1] ;

	sprintf(cmdbuf, "%s%d\n", MRLPCMDR_OK, rc) ;
	return(mrlp_wsock(RSOCK, cmdbuf, strlen(cmdbuf), cmdbuf)) ;
}

/*
	(int)rc= print_file(lp_rcp) ;

	rc:
		0	file printed ok, (*lp_rcp) filled in.
		>0	"soft-error" not causing daemon to abort job
		<0	"hard-error", causing daemon to abort job

	(*lp_rcp) is filled in with the return code from the
	actual file-print process (valid only if rc == 0).

	Prints remote file:
		(1)	creates listening data socket.
		(2)	waits for connection on listening data socket,
			returns "timeout" error status if timeout.
		(3)	closes listening data socket.
		(4)	forks line printer process, and connects the
			connected data socket to its stdin and stdout,
		(5)	closes connected data socket.

*/
static int print_file(lp_rcp)
int *lp_rcp ;
{
	char iobuf[MRLP_IOBSIZE] ;
	int lsockd, csockd ;
	SOCKA_T csockd_a ;
	int rc, ofh, l, len ;
	pid_t pid_in, pid_out ;

	if (OPT_DEBUG) mrlp_msg("issue listen for data") ;
	if (issuelisten(&lsockd, &CUR_LSOCKD_A)) {
		mrlp_err("can't listen for data") ;
		return(-1) ;
	}

	if (OPT_DEBUG) mrlp_msg("wait accept data socket") ;
	if (waitaccept(lsockd, &csockd, &csockd_a, 30)) {
		close(lsockd) ;
		return(-2) ;
	}
	if (OPT_DEBUG) mrlp_msg("close listening data socket") ;
	close(lsockd) ;

	signal(SIGCHLD, SIG_DFL) ;
	if ((rc= start_lp(&ofh)) != 0) {
		mrlp_nerr("can't start lp command", rc) ;
		return(-3) ;
	}

	pid_in= C_PID ;
	while(C_PID != 0) {
		if ((len= read(csockd, iobuf, sizeof(iobuf)))<= 0) break ;
		if ((l= write(ofh, iobuf, len))< len) break ;
	}
	pid_out= C_PID ;

	close(ofh) ;

	(*lp_rcp)= getlp_rc(pid_in) ;

	close(csockd) ;

	if (pid_out != (pid_t) 0) {		/* was lp still active? */
		if (len> 0) {			/* not at EOF(input) ?  */
			if (l< 0) mrlp_perr("lp pipe write error") ;
			else	  mrlp_nerr("lp pipe write block short", l) ;
		}
		return(1) ;
	}

	return(0) ;
}

static int issuelisten(lsock_p, lsocka_p)
int *lsock_p ;
SOCKA_T *lsocka_p ;
{
	if (((*lsock_p)= socket(AF_INET, SOCK_STREAM, 0))< 0) {
		mrlp_perr("socket") ;
		return(1) ;
	}
	if (bind(*lsock_p, lsocka_p, sizeof(SOCKA_T))< 0) {
		mrlp_perr("bind") ;
		return(2) ;
	}
	if (listen(*lsock_p, 1)< 0) {
		mrlp_perr("listen") ;
		return(3) ;
	}
	return(0) ;
}

static int waitaccept(lsock, sock_p, socka_p, timeout)
int lsock ;				/* socket on which to listen */
int *sock_p ;				/* return socket descriptor  */
SOCKA_T *socka_p ;			/* return address of socket  */
int timeout ;				/* timeout # seconds or 0    */
{
	struct sockaddr lsock_a ;
	int csock, lsock_al ;

	lsock_al= sizeof(struct sockaddr) ;
	if ((csock= accept(lsock, &lsock_a, &lsock_al))< 0) {
		mrlp_perr("accept") ;
		inc_errs() ;
		return(1) ;
	}
	if (lsock_al != sizeof(SOCKA_T)) {
		mrlp_nerr("wrong accept socket address size", lsock_al) ;
		inc_errs() ;
		return(2) ;
	}
	memcpy((char *)socka_p, (char *)&lsock_a, sizeof(SOCKA_T)) ;
	(*sock_p)= csock ;
	return(0) ;
}

static void inc_errs()
{
	if (++ERRS> MAX_ERRS) {
		mrlp_abort("giving up due to excessive errors") ;
		/*NOTREACHED*/
	}
}

static int start_lp(ofh_p)
int *ofh_p ;
{
	char cmd_argbuf[MRLP_LEABSIZE+1] ;
	char lit_argbuf[MRLP_LEABSIZE+1] ;
	char *args[MRLP_NEARGS+1] ;
	int rc ;

	makecmd(cmd_argbuf) ;
	if (!OPT_QUIET) mrlp_msg(cmd_argbuf) ;

	if ((rc= mrlpdcmd_parse(
		cmd_argbuf,
		args, MRLP_NEARGS+1,
		lit_argbuf, MRLP_LEABSIZE+1
	)) != 0) {
		mrlp_nerr("parseing lp command", rc) ;
		return(-1) ;
	}

	if (args[0] == (char *)NULL) {
		mrlp_err("lp command missing") ;
		return(-1) ;
	}

	if ((rc= mrlpdcmd_fork(
		(lpma.cur_lpexec[0]!='\0')? lpma.cur_lpexec: args[0],
		args,
		(int *)NULL, ofh_p, &C_PID
	)) != 0) {
		mrlp_nerr("forking lp command", rc) ;
		return(-2) ;
	}
	return(0) ;
}

static int getlp_rc(pid)
pid_t pid ;
{
	int wrc, rc ;
	pid_t wpid ;

	rc= -3 ;				/* don't know return code */
	if ((wpid= wait(&wrc)) != pid) {
		if (wpid< 0) mrlp_perr("wait for lp command") ;
		else         mrlp_nerr("wait for lp command", (int)wpid) ;
	}
	else {
		if (WIFEXITED(wrc)) {
			rc= WEXITSTATUS(wrc) ;
		}
		else if (WIFSIGNALED(wrc)) {
			rc= -(1000 + WTERMSIG(wrc)) ;
			if (WCOREDUMP(wrc)) rc-= 1000 ;
		}
	}

	return(rc) ;
}

static void sigcatch(signo)
int signo ;
{
	signal(signo, SIG_IGN) ;

	switch(signo) {

#if 0
		case	SIGCHLD:
			mrlp_nmsg("SIGCHLD", "pid", (int)C_PID) ;
			mrlp_nmsg("SIGCHLD", "rc", getlp_rc(C_PID)) ;
			C_PID= 0 ;		/* already dead */
			break ;
#endif

		case	SIGHUP:			/* kill current job */
			mrlp_msg("SIGHUP") ;
			kill_lpjob() ;
			break ;

		case	SIGTERM:		/* kill daemon */
			mrlp_msg("SIGTERM") ;
			kill_lpjob() ;
			mrlp_abort("terminated by user signal") ;
			break ;

		case	SIGPIPE:
			mrlp_msg("SIGPIPE") ;
			kill_lpjob() ;
			break ;

		default:
			mrlp_nmsg("ignored", "signal", signo) ;
			break ;
	}

	signal(signo, sigcatch) ;
}	

static void kill_lpjob()
{
	if (C_PID != 0) {
		mrlp_nmsg("killing lpjob", "pid", (int)C_PID) ;
		if (kill(C_PID, SIGKILL)< 0) {
			mrlp_perr("kill failed") ;	/* ESRCH */
			C_PID= 0 ;
		}
	}
}

static void mrlp_nmsg(msg, ntype, n)
char *msg, *ntype ;
int n ;
{
	sprintf(MSGBUF, "%s: %s=%d", msg, ntype, n) ;
	mrlp_msg(MSGBUF) ;
}

/*
	command-argument substitution, using "substr()" function.

	NOTE:	NOT protected!

		substr() command does not know how long the
		output string is, therefore it may overflow!

*/

static void cmdsubproc(outb, outblp, fmt, value)
char *outb, *value, *fmt ;
int *outblp ;
{
	memcpy(outb, value, (*outblp)= strlen(value)) ;
}
	
static struct sub_item cmdsub[]= {
	{ "@FN",  (char *)NULL, (void *)lpma.cur_lpfn, cmdsubproc },
	{ "@OPT", (char *)NULL, (void *)lpma.cur_lpopts, cmdsubproc }
} ;
#define	N_SUBITEMS	(sizeof(cmdsub)/sizeof(cmdsub[0]))

static void makecmd(cmdbuf)
char *cmdbuf ;
{
	int i ;

	memcpy(cmdbuf, lpma.cur_lpargs, MRLP_LEABSIZE) ;
	for (i= 0; i< N_SUBITEMS; i++) {
		substr(cmdbuf, &cmdsub[i]) ;		/* see NOTE: */
	}
}
