/*

	which:	   find executable file by searching across ${PATH}

		syntax:		which name [name ...]

		if name is found in search path, prints full filename.
		if name is not found, prints nothing.

	2.10.90, Marty

*/

#include	"compiler.h"
#include	<stdio.h>
#include	<fcntl.h>
#include	<sys/types.h>
#include	<sys/stat.h>

char *getenv() ;

static void print_syntax() ;
static void get_element() ;

void main(argc, argv)
int argc ;
char *argv[] ;
{
	char filename[1025] ;
	char element[129], path[1025] ;
	char *value ;
	int arg ;

	if (argc< 2) {
		print_syntax() ;
		exit(1) ;
	}

	if ((value= getenv("PATH")) == (char *)NULL) {
		fprintf(stderr, "No PATH variable.\n") ;
		exit(1) ;
	}

	for (arg= 1; arg< argc; arg++) {
		strcpy(path, value) ;
		while(path[0] != '\0') {
			get_element(element, path) ;
			if (element[0] == '\0') {
				strcpy(element, ".") ;
			}
			sprintf(filename, "%s/%s", element, argv[arg]) ;
			if (state(filename)!=0) {
				printf("%s\n", filename) ;
				break;
			}
		}
	}

}

/*

static int state(file)
char *file ;
{
	int fd ;

	if ((fd= open(file, O_RDONLY))>= 0) {
		close(fd) ;
		return(1) ;
	}
	return(0) ;
}

*/

static int state(file)
char *file ;
{
	struct stat stb ;

	if (stat(file, &stb)==0) {
		return(1) ;
	}
	return(0) ;
}

static void get_element(element, path)
char element[], path[] ;
{
	register int i;
	int j ;

	for (i= 0; (path[i] != ':') && (path[i] != '\0'); i++) {
		element[i]= path[i] ;
	}
	element[i]= '\0' ;

	if (path[i] == '\0') {
		path[0]= '\0' ;
		return ; 
	}

	j= (i+1) ;
	for (i= 0; path[j+i] != '\0'; i++) {
		path[i]= path[j+i] ;
	}
	path[i]= '\0' ;
}

static void print_syntax()
{
	fprintf(stderr, "which name [name ...]\n") ;
}
